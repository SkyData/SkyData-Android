/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */
package skydata.core.threads;

import java.io.File;
import java.io.FileNotFoundException;
import java.io.FileOutputStream;
import java.io.IOException;
import java.io.ObjectOutputStream;
import java.util.ArrayList;
import java.util.Collections;
import java.util.Date;
import java.util.logging.Level;
import java.util.logging.Logger;
import skydata.core.FileScanner;
import skydata.core.FolderTree.Diff;
import skydata.core.FolderTree.FileNode;
import skydata.core.FolderTree.FolderNode;
import skydata.core.FolderTree.Node;
import skydata.core.FolderTree.RootFolder;
import skydata.core.FolderTree.TreeFunctions;
import skydata.core.WebService.Download;
import skydata.core.WebService.Remove;
import skydata.core.WebService.TreeService;
import skydata.core.WebService.Upload;
import skydata.core.WebService.Mkdir;

/**
 *
 * @author Red
 */
public class SyncThread implements Runnable {

    private SyncQueue sq;
    private TreeService ts;
    private RootFolder local;
    private TreeFunctions tf;
    private boolean finish;


    public SyncThread(SyncQueue sq, RootFolder local) {
        this.sq = sq;
        this.ts = new TreeService(local.getPath());
        this.local = local;
        tf = new TreeFunctions(ts);
        finish = false;
    }

    public void finish() {
        finish = true;
    }

    public boolean deleteDir(File dir) {
        if (dir.isDirectory()) {
            String[] children = dir.list();
            for (int i=0; i < children.length; i++) {
                boolean success = deleteDir(new File(dir, children[i]));
                if (!success) return false;
            }
        }
        return dir.delete();
    }
    
    private void removeLocal(Diff d) {
        //System.out.println("remove "+d.getName());
        if(!d.getConflict()) {
            File f = new File(d.getPath());
            if(f.exists()) deleteDir(f);
            FolderNode parent = (FolderNode)d.getParent();
            if(parent == null) parent = local.getParentRec(d.getNode(), d.getParentPath());
            parent.removeNode(d.getName());
        }
    }

    private void removeRemote(Diff d) {
        //System.out.println("removeRemote "+d.getName());
        if(!d.getConflict()) {
            ts.remove(d.getPath(),local.getOwner());
            FolderNode parent = (FolderNode)d.getParent();
            if (parent == null) parent = local.getParentRec(d.getNode(), d.getParentPath());
            if (parent != null) parent.removeNode(d.getName());
        }
    }

    private void upload(Diff d) {
        //System.out.println("upload "+d.getName());
        if(!d.getNode().getFile().exists()) return;
        if(d.getConflict()) {
            String path = d.getPath();
            int i = 1;
            while((new File(path+"-"+i+"-conflict")).exists()) ++i;
            File a = new File(path);
            File b = new File(path+"-"+i+"-conflict");
            a.renameTo(b);
        }
        else {
            if(d.getNode().getClass() == FileNode.class) {
                String subf = d.getParentPath().substring(local.getPath().length());
                Date date = Upload.upload(new File(d.getPath()), local.getName(), subf+File.separator, local.getOwner());
                d.getNode().setRemoteDate(date);
            } else {
                String subf = d.getPath().substring(local.getParent().length()+1);
                Date date = Mkdir.mkdir(subf);
                d.getNode().setRemoteDate(date);
            }
            if (d.getParent() != null) {
                d.getParent().addNode(d.getName(), d.getNode());
            } else {
                local.addRecursive(d.getNode(), d.getParentPath());
            }
        }
    }

    private void download(Diff d) {
        //System.out.println("download "+d.getName());
        String subf = d.getParentPath().substring(local.getPath().length());
        if(d.getNode().getClass() != FolderNode.class) {
            Download.download(d.getNode().getFile(),local.getName(), subf+File.separator,local.getOwner());
        } else {
            File folder = new File(d.getPath());
            folder.mkdir();
        }
        d.getNode().setLocalDate(new Date(d.getNode().getFile().lastModified()));
        if (d.getParent() != null) {
            d.getParent().addNode(d.getName(), d.getNode());
        } else {
            local.addRecursive(d.getNode(), d.getParentPath());
        }
    }

    public void run() {
        //init
        FolderNode look = FileScanner.scan(local.getPath());
        ArrayList<Diff> firstd = tf.createDiff(local, look, FileNode.LOCAL,local.getOwner());
        FolderNode ffn = ts.getRoot(local.getOwner());
        ArrayList<Diff> fremoted = tf.createDiff(local, ffn, FileNode.REMOTE,local.getOwner());
        tf.treatConflicts(firstd, fremoted);
        for (int i = 0; i < firstd.size(); ++i) {
            if (firstd.get(i).getAction() == Diff.ADD) {
                upload(firstd.get(i));
            } else {
                removeRemote(firstd.get(i));
            }
            TreeFunctions.writeTree(local);
        }
        for(int i = 0; i < fremoted.size(); ++i) {
            if (fremoted.get(i).getAction() == Diff.ADD) {
                download(fremoted.get(i));
            } else {
                removeLocal(fremoted.get(i));
            }
            TreeFunctions.writeTree(local);
        }
        //loop
        while(!finish) {
            //System.out.println("sync "+local.getName());
            ArrayList<Diff> locald1 = sq.getNext();
            ArrayList<Diff> locald = new ArrayList<Diff>();
            for(int i = 0; i < locald1.size(); ++i) {
                if(locald1.get(i).getAction() == Diff.REMOVE ||
                    !local.isDuplicate(locald1.get(i).getNode())) {
                    locald.add(locald1.get(i));
                }
            }
            FolderNode fn = ts.getRoot(local.getOwner());
            tf.printTree(local.getName(), local,Node.LOCAL,local.getOwner());
            tf.printTree(local.getName(), fn,Node.REMOTE,local.getOwner());
            ArrayList<Diff> remoted = tf.createDiff(local, fn, FileNode.REMOTE,local.getOwner());
            tf.treatConflicts(locald, remoted);
            //System.out.println(remoted.size());
            //System.out.println(locald.size());
            for(int i = 0; i < locald.size(); ++i) {
                if(locald.get(i).getAction() == Diff.ADD) {
                    upload(locald.get(i));
                } else {
                    removeRemote(locald.get(i));
                }
                TreeFunctions.writeTree(local);
            }
            for(int i = 0; i < remoted.size(); ++i) {
                if(remoted.get(i).getAction() == Diff.ADD) {
                    download(remoted.get(i));
                } else {
                    removeLocal(remoted.get(i));
                }
                TreeFunctions.writeTree(local);
            }
            local.setLocalDate(new Date(local.getFile().lastModified()));
            if(sq.getRemoteDate() != null)local.setRemoteDate(sq.getRemoteDate());
            TreeFunctions.writeTree(local);
        }
    }
}
